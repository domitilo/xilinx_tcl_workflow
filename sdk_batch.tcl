
# execute this scipt with this command:
# "xsct scriptname.tcl"
# where "xsct" is located at: xilinx/SDK/<version>/bin/

set binaries_path "../binaries/vivado/" ; # Path where the .bin, .hdf files are located
set binaries_sdk  "../binaries/sdk/" ; # Path where the .bin, .hdf files are located
set fsbl_patch_path "../fsbl_patch"; # Path containing src files for fsbl
set apps_src_path "../apps_src"; # Path containing src files for fsbl
set sdk_dir "../sdk" ;# Path in which locate projects generated by SDK
set platform "Zynq_7000"
# set platform "Zynq MP" ; # Zynq UltraScale+

set appnames [list \
  "dma-transfers" \
  "multiple-dma-transfers" \
]



set bsp         "bsp"
set hwproject   "hw"
set application "sw"
set fsbl        "fsbl"
set pmufw       "pmufw"
set pmubsp      "pmubsp"
set os          "standalone"
set hwspec [glob $binaries_path/*.hdf]

puts ""
puts "       SDK Batch script "
puts " * HDF to use:\t [file normalize $hwspec]"
puts " * Output Path:\t [file normalize $sdk_dir]"
puts " "
puts ""

# Definitions for each platform, based on SDK template names
dict set platform_defs Zynq_7000      fsbl_appname "Zynq FSBL"
dict set platform_defs Zynq_7000      cpu_name     "ps7_cortexa9"
dict set platform_defs ZynqUltrascale fsbl_appname "Zynq MP FSBL"
dict set platform_defs ZynqUltrascale cpu_name     "psu_cortexa53"



# delete the old
file delete -force $sdk_dir/.metadata
file delete -force $sdk_dir/$bsp
file delete -force $sdk_dir/$hwproject
file delete -force $sdk_dir/$fsbl
file delete -force $sdk_dir/$pmubsp
file delete -force $sdk_dir/$pmufw

# Create workspace and import the project into
file mkdir $sdk_dir
setws $sdk_dir

createhw -name $hwproject -hwspec $hwspec

# Create FSBL
createapp \
  -name $fsbl \
  -hwproject $hwproject -proc [dict get $platform_defs $platform cpu_name]_0 \
  -os standalone \
  -app [dict get $platform_defs $platform fsbl_appname] \
  -bsp $bsp
file copy -force $fsbl_patch_path $sdk_dir/$fsbl

foreach app $appnames {
  # Create app for Linux OS
  createapp \
    -name $app \
    -lang C \
    -os linux \
    -hwproject $hwproject \
    -proc [dict get $platform_defs $platform cpu_name] \
    -app {Linux Empty Application} 
  file copy -force "$apps_src_path/$app" "$sdk_dir/$app"  
}

projects -build

file copy -force [glob $sdk_dir/$fsbl/Debug/*.elf] $binaries_sdk
foreach app $appnames {
  # Copy files into path visible for Petalinux
  file copy -force [glob $sdk_dir/$app/Debug/*.elf] $binaries_sdk
}




